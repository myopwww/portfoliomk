Usage:
    portfoliomk SOURCE [--database DATABASE] [--messages MESSAGES] [--assets ASSETS] [--server SERVCONF] [--into DEST]
    portfoliomk hydrated SOURCE with DATABASE [into DEST]
    portfoliomk SOURCE messages [into [--json] DEST]
    portfoliomk localize SOURCE with MESSAGES [into DEST]
    portfoliomk optimized ASSETS [into DEST]
    portfoliomk server configuration from SOURCE [into DEST]

No subcommands:
    --database DATABASE       What database to use [default: database.json]
    --messages MESSAGES       What translation files to use [default: messages/**.po]
    --assets ASSETS           The directory containing the asset files to optimize [default: assets/]
    --server SERVCONF         What server configuration file to use [default: server.yaml]
    --into DEST               Where to put the ready-to-upload files [default: dist]

    Does the entire pipeline (a dash means it's ran concurrently):
        -   1. create hydrated SOURCE with DATABASE into unlocalized/
            2. create unlocalized/ messages into MESSAGES
            3. create localize unlocalized/ with MESSAGES into DEST
        -   create optimized ASSETS into DEST/ASSETS
        -   create server configuration from SERVCONF into DEST/SERVCONF

Subcommand HYDRATE:
    Creates hydrated .html, .css and .js files from:
        - .pug, .slim or .html files
        - .styl, .sass, .scss or .css files
        - .ls, .ts, .coffee or .js files
    Using data from DATABASE

Subcommand LOCALIZE:
    Translates SOURCE .html, .js and .css files with MESSAGES .po or .json file(s) into DEST.

Subcommand MESSAGES:
    --json                           Create a .json file instead of a .po file. Translation context is not extracted into JSON files.
    --marker-start TEXT              What is used to mark the start of a translatable text. Used for css, js and HTML. [default: %%(]
    --marker-end TEXT                What is used to mark the end of a translatable text. Used for css, js and HTML. [default: %%)]
                                     Note: --marker-end cannot be the same as --marker-start.
    --html-markers ATTRIBUTES        What HMTL attributes to use to mark the tag's inner HTML as translatable. Space-separated. [default: i18n translate]
    --html-context ATTRIBUTES        What HTML attributes to use to provide translation context. Space-separated. [default: i18n-context translate-context]
    --js-marker-str STRING-TAGS      What JS template literal string tags to use to mark a template literal string as translatable. Space-separated. [default: i18n translate]
                                     JS tagged template literal strings look like TAG`SOME TEXT`. For example, to mark the string "hello" as translatable, use i18n`hello`.
    --js-marker-fun NAMES            Function names used to mark a string as translatable. Can be used when template literals (an ES2015 feature) cannot be used. [default: _ i18n]
                                     Note that you can use functions to provide translation context, as a second argument. 
                                     For example: _("hello", "home page") will be extracted as follows in a .po file:
                                     msgctxt "home page"
                                     msgid "hello"
                                     msgstr ""
    --css-marker-fun NAMES           CSS function names to mark a string as translatable. See --js-marker-fun for more features, it works the same way. [default: _ i18n]
    --config YAML-FILE               A YAML config file to use. The property names are the same as the flags without the leading double dash, and with dashes optionnally replaced by spaces or underscores.

    Extract translatables from SOURCE into MESSAGES .po (or .json) files(s).
    Note that this will create a temporary ~/.cache/portfoliomk/message_extraction_settings.json 
    so that it can be used by LOCALIZE to correctly strip markers from the output files.

Subcommand OPTIMIZE
